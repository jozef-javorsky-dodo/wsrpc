package main

import (
	"fmt"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	contextPackage = protogen.GoImportPath("context")
	wsrpcPackage   = protogen.GoImportPath("github.com/smartcontractkit/wsrpc")
	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
	codesPackage   = protogen.GoImportPath("google.golang.org/grpc/codes")
	statusPackage  = protogen.GoImportPath("google.golang.org/grpc/status")
)

// generateFile generates a _wsrpc.pb.go file containing wsRPC and gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_wsrpc.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-wsrpc. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-wsrpc v", version)
	g.P("// - protoc             ", protocVersion(gen))
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)

	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}

	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// generateFileContent generates the wsrpc and grpc service definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the grpc package it is being compiled against.")
	g.P("// Requires gRPC-Go v1.32.0 or later.")
	g.P("const _ = grpc.SupportPackageIsVersion7")

	wsrpcClientName := service.GoName + "Client"
	grpcClientName := service.GoName + "Grpc" + "Client"
	g.P("// ", wsrpcClientName, " is the client API for ", service.GoName, " service.")
	g.P("//")

	// Client interface.
	g.AnnotateSymbol(wsrpcClientName, protogen.Annotation{Location: service.Location})
	g.P("type ", wsrpcClientName, " interface {")
	for _, method := range service.Methods {
		g.AnnotateSymbol(wsrpcClientName+"."+method.GoName, protogen.Annotation{Location: method.Location})
		g.P(method.Comments.Leading,
			clientSignature(g, method))
	}
	g.P("}")
	g.P()

	// wsrpc Client structure.
	g.P("type ", unexport(wsrpcClientName), " struct {")
	g.P("cc ", wsrpcPackage.Ident("ClientInterface"))
	g.P("}")
	g.P()

	// grpc Client structure
	g.P("type ", unexport(grpcClientName), " struct {")
	g.P("cc ", grpcPackage.Ident("ClientConnInterface"))
	g.P("}")
	g.P()

	// wsrpc NewClient factory.
	g.P("func New", wsrpcClientName, " (cc ", wsrpcPackage.Ident("ClientInterface"), ") ", wsrpcClientName, " {")
	g.P("return &", unexport(wsrpcClientName), "{cc}")
	g.P("}")
	g.P()

	// grpc NewClient factory.
	g.P("func New", grpcClientName, " (cc ", grpcPackage.Ident("ClientConnInterface"), ") ", wsrpcClientName, " {")
	g.P("return &", unexport(grpcClientName), "{cc}")
	g.P("}")
	g.P()

	var methodIndex int
	// Client method implementations.
	for _, method := range service.Methods {
		// Unary RPC method
		genWsrpcClientMethod(gen, file, g, method, methodIndex)
		genGrpcClientMethod(gen, file, g, method, methodIndex)
		methodIndex++
	}

	// Server interface.
	serverType := service.GoName + "Server"
	unimplementedServerType := "Unimplemented" + serverType
	unsafeServerType := "Unsafe" + serverType
	g.P("// ", serverType, " is the server API for ", service.GoName, " service.")
	g.AnnotateSymbol(serverType, protogen.Annotation{Location: service.Location})
	g.P("type ", serverType, " interface {")
	for _, method := range service.Methods {
		g.AnnotateSymbol(serverType+"."+method.GoName, protogen.Annotation{Location: method.Location})
		g.P(method.Comments.Leading,
			serverSignature(g, method))
	}
	g.P("mustEmbed", unimplementedServerType, "()")
	g.P("}")
	g.P()

	// Unimplemented server type.
	g.P("// " + unimplementedServerType + " must be embedded to have forward compatible implementations.")
	g.P("type ", unimplementedServerType, " struct {")
	g.P("}")
	g.P()
	for _, method := range service.Methods {
		printUnimplementedServerMethod(g, service, method)
	}
	g.P("func (", unimplementedServerType, ") mustEmbed", unimplementedServerType, "() {}")

	// Unsafe server type.
	g.P("// ", unsafeServerType, " may be embedded to opt out of forward compatibility for this service.")
	g.P("// Use of this interface is not recommended, as added methods to ", serverType, " will")
	g.P("// result in compilation errors.")
	g.P("type ", unsafeServerType, " interface {")
	g.P("mustEmbed", unimplementedServerType, "()")
	g.P("}")

	// Wsrpc server registration.
	wsrpcServiceDescVar := service.GoName + "_ServiceDesc"
	g.P("func Register", service.GoName, "Server(s ", wsrpcPackage.Ident("ServiceRegistrar"), ", srv ", serverType, ") {")
	g.P("s.RegisterService(&", wsrpcServiceDescVar, `, srv)`)
	g.P("}")
	g.P()

	// Grpc server registration.
	grpcSuffix := "_Grpc"
	grpcServiceDescVar := service.GoName + "_ServiceDesc" + grpcSuffix
	g.P("func RegisterGrpc", service.GoName, "Server(s ", grpcPackage.Ident("ServiceRegistrar"), ", srv ", serverType, ") {")
	g.P("s.RegisterService(&", grpcServiceDescVar, `, srv)`)
	g.P("}")
	g.P()

	// Server handler implementations.
	var wsrpcHandlerNames []string
	var grpcHandlerNames []string
	for _, method := range service.Methods {
		hname := genWsrpcServerMethod(gen, file, g, method)
		wsrpcHandlerNames = append(wsrpcHandlerNames, hname)
		hname = genGrpcServerMethod(g, method)
		grpcHandlerNames = append(grpcHandlerNames, hname)

	}

	// Wsrpc Service descriptor.
	g.P("// ", wsrpcServiceDescVar, " is the ", wsrpcPackage.Ident("ServiceDesc"), " for ", service.GoName, " service.")
	g.P("// It's only intended for direct use with ", wsrpcPackage.Ident("RegisterService"), ",")
	g.P("// and not to be introspected or modified (even as a copy)")
	g.P("var ", wsrpcServiceDescVar, " = ", wsrpcPackage.Ident("ServiceDesc"), " {")
	g.P("ServiceName: ", strconv.Quote(string(service.Desc.FullName())), ",")
	g.P("HandlerType: (*", serverType, ")(nil),")
	g.P("Methods: []", wsrpcPackage.Ident("MethodDesc"), "{")
	for i, method := range service.Methods {
		g.P("{")
		g.P("MethodName: ", strconv.Quote(string(method.Desc.Name())), ",")
		g.P("Handler: ", wsrpcHandlerNames[i], ",")
		g.P("},")
	}
	g.P("},")
	g.P("}")
	g.P()

	// Grpc Service descriptor.
	g.P("// ", grpcServiceDescVar, " is the ", grpcPackage.Ident("ServiceDesc"), " for ", service.GoName, " service.")
	g.P("// It's only intended for direct use with ", grpcPackage.Ident("RegisterService"), ",")
	g.P("// and not to be introspected or modified (even as a copy)")
	g.P("var ", grpcServiceDescVar, " = ", grpcPackage.Ident("ServiceDesc"), " {")
	g.P("ServiceName: ", strconv.Quote(string(service.Desc.FullName())), ",")
	g.P("HandlerType: (*", serverType, ")(nil),")
	g.P("Methods: []", grpcPackage.Ident("MethodDesc"), "{")
	for i, method := range service.Methods {
		g.P("{")
		g.P("MethodName: ", strconv.Quote(string(method.Desc.Name())), ",")
		g.P("Handler: ", grpcHandlerNames[i], ",")
		g.P("},")
	}
	g.P("},")
	g.P("Streams:  []", grpcPackage.Ident("StreamDesc"), "{},")
	g.P("Metadata: \"", file.Proto.GetName(), "\",")
	g.P("}")
	g.P()
}

func clientSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	s := method.GoName + "(ctx " + g.QualifiedGoIdent(contextPackage.Ident("Context"))
	s += ", in *" + g.QualifiedGoIdent(method.Input.GoIdent)
	s += ") ("
	s += "*" + g.QualifiedGoIdent(method.Output.GoIdent)
	s += ", error)"

	return s
}

func genWsrpcClientMethod(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, method *protogen.Method, index int) { //nolint:unparam
	service := method.Parent

	g.P("func (c *", unexport(service.GoName), "Client) ", clientSignature(g, method), "{")
	g.P("out := new(", method.Output.GoIdent, ")")
	g.P(`err := c.cc.Invoke(ctx, "`, method.Desc.Name(), `", in, out)`)
	g.P("if err != nil { return nil, err }")
	g.P("return out, nil")
	g.P("}")
	g.P()
}

func genGrpcClientMethod(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, method *protogen.Method, index int) { //nolint:unparam
	service := method.Parent

	g.P("func (c *", unexport(service.GoName), "GrpcClient) ", clientSignature(g, method), "{")
	g.P("out := new(", method.Output.GoIdent, ")")
	g.P(`err := c.cc.Invoke(ctx, "`, "/pb.", service.GoName, "/", method.Desc.Name(), `", in, out)`)
	g.P("if err != nil { return nil, err }")
	g.P("return out, nil")
	g.P("}")
	g.P()
}

func serverSignature(g *protogen.GeneratedFile, method *protogen.Method) string {
	var reqArgs []string
	reqArgs = append(reqArgs, g.QualifiedGoIdent(contextPackage.Ident("Context")))
	ret := "(*" + g.QualifiedGoIdent(method.Output.GoIdent) + ", error)"
	reqArgs = append(reqArgs, "*"+g.QualifiedGoIdent(method.Input.GoIdent))

	return method.GoName + "(" + strings.Join(reqArgs, ", ") + ") " + ret
}

func printUnimplementedServerMethod(g *protogen.GeneratedFile, service *protogen.Service, method *protogen.Method) {
	serverType := service.GoName + "Server"
	unimplementedServerType := "Unimplemented" + serverType
	reqType := g.QualifiedGoIdent(method.Input.GoIdent)
	retType := g.QualifiedGoIdent(method.Output.GoIdent)
	var reqArgs []string
	reqArgs = append(reqArgs, g.QualifiedGoIdent(contextPackage.Ident("Context")))
	reqArgs = append(reqArgs, "*"+reqType)
	ret := "(*" + retType + ", error)"

	g.P("func (" + unimplementedServerType + ") " + method.GoName + "(" + strings.Join(reqArgs, ", ") + ") " + ret + " {")
	g.P("return nil, ", statusPackage.Ident("Errorf"), "(", codesPackage.Ident("Unimplemented"), ", \"method ", method.GoName, " not implemented\")")
	g.P("}")
}

func genWsrpcServerMethod(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, method *protogen.Method) string { //nolint:unparam
	service := method.Parent
	hname := fmt.Sprintf("_%s_%s_Handler", service.GoName, method.GoName)

	g.P("func ", hname, "(srv interface{}, ctx ", contextPackage.Ident("Context"), ", dec func(interface{}) error) (interface{}, error) {")
	g.P("in := new(", method.Input.GoIdent, ")")
	g.P("if err := dec(in); err != nil { return nil, err }")
	g.P("return srv.(", service.GoName, "Server).", method.GoName, "(ctx, in)")
	g.P("}")
	g.P()

	return hname
}

func genGrpcServerMethod(g *protogen.GeneratedFile, method *protogen.Method) string { //nolint:unparam
	service := method.Parent
	serverType := service.GoName + "Server"
	hname := fmt.Sprintf("_%s_%s_Grpc_Handler", service.GoName, method.GoName)

	g.P("func ", hname, "(srv interface{}, ctx ", contextPackage.Ident("Context"), ", dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {")
	g.P("in := new(", method.Input.GoIdent, ")")
	g.P("if err := dec(in); err != nil { return nil, err }")
	g.P("if interceptor == nil {\n\t\treturn srv.(", serverType, ").", method.GoName, "(ctx, in)\n\t}")
	g.P("info := &", grpcPackage.Ident("UnaryServerInfo"), "{")
	g.P("\tServer:     srv,")
	g.P("\tFullMethod: \"/pb.", service.GoName, "/", method.GoName, "\",")
	g.P("}")

	g.P("handler := func(ctx ", contextPackage.Ident("Context"), ", req interface{}) (interface{}, error) {")
	g.P("return srv.(", serverType, ").", method.GoName, "(ctx, req.(*", method.GoName, "Request))")
	g.P("}")
	g.P("return interceptor(ctx, in, info, handler)")
	g.P("}")

	return hname
}

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }
