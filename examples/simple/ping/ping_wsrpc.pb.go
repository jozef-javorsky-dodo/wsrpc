// Code generated by protoc-gen-go-wsrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-wsrpc v0.0.1
// - protoc             v3.15.8

package ping

import (
	context "context"
	wsrpc "github.com/smartcontractkit/wsrpc"
)

// PingClient is the client API for Ping service.
//
type PingClient interface {
	Ping(ctx context.Context, in *PingRequest) (*PingResponse, error)
}

type pingClient struct {
	cc wsrpc.ClientInterface
}

func NewPingClient(cc wsrpc.ClientInterface) PingClient {
	return &pingClient{cc}
}

func (c *pingClient) Ping(ctx context.Context, in *PingRequest) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "Ping", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingServer is the server API for Ping service.
type PingServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterPingServer(s wsrpc.ServiceRegistrar, srv PingServer) {
	s.RegisterService(&Ping_ServiceDesc, srv)
}

func _Ping_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(PingServer).Ping(ctx, in)
}

// Ping_ServiceDesc is the wsrpc.ServiceDesc for Ping service.
// It's only intended for direct use with wsrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ping_ServiceDesc = wsrpc.ServiceDesc{
	ServiceName: "ping.Ping",
	HandlerType: (*PingServer)(nil),
	Methods: []wsrpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Ping_Ping_Handler,
		},
	},
}

// GnipClient is the client API for Gnip service.
//
type GnipClient interface {
	Gnip(ctx context.Context, in *GnipRequest) (*GnipResponse, error)
}

type gnipClient struct {
	cc wsrpc.ClientInterface
}

func NewGnipClient(cc wsrpc.ClientInterface) GnipClient {
	return &gnipClient{cc}
}

func (c *gnipClient) Gnip(ctx context.Context, in *GnipRequest) (*GnipResponse, error) {
	out := new(GnipResponse)
	err := c.cc.Invoke(ctx, "Gnip", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GnipServer is the server API for Gnip service.
type GnipServer interface {
	Gnip(context.Context, *GnipRequest) (*GnipResponse, error)
}

func RegisterGnipServer(s wsrpc.ServiceRegistrar, srv GnipServer) {
	s.RegisterService(&Gnip_ServiceDesc, srv)
}

func _Gnip_Gnip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GnipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(GnipServer).Gnip(ctx, in)
}

// Gnip_ServiceDesc is the wsrpc.ServiceDesc for Gnip service.
// It's only intended for direct use with wsrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gnip_ServiceDesc = wsrpc.ServiceDesc{
	ServiceName: "ping.Gnip",
	HandlerType: (*GnipServer)(nil),
	Methods: []wsrpc.MethodDesc{
		{
			MethodName: "Gnip",
			Handler:    _Gnip_Gnip_Handler,
		},
	},
}
